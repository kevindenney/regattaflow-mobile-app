// src/app/(tabs)/courses/new/strategy.tsx
import React, { useState, useEffect } from 'react';
import { View, Text, ScrollView, TouchableOpacity, Share } from 'react-native';
import { useRouter, useLocalSearchParams } from 'expo-router';
import {
  Sparkles,
  TrendingUp,
  Wind,
  Anchor,
  Target,
  Share2,
  BookmarkPlus,
  ChevronDown,
  ChevronUp
} from 'lucide-react-native';
import { Button, ButtonText, ButtonIcon } from '@/src/components/ui/button';
import { Badge, BadgeText } from '@/src/components/ui/badge';
import { raceStrategyEngine } from '@/src/services/ai/RaceStrategyEngine';

interface StrategySection {
  title: string;
  icon: any;
  color: string;
  bgColor: string;
  points: string[];
  expanded: boolean;
}

export default function StrategyScreen() {
  const router = useRouter();
  const params = useLocalSearchParams();
  const [loading, setLoading] = useState(true);
  const [strategy, setStrategy] = useState<any>(null);
  const [sections, setSections] = useState<StrategySection[]>([]);
  const [monteCarlo, setMonteCarlo] = useState<any>(null);

  useEffect(() => {
    generateStrategy();
  }, []);

  const generateStrategy = async () => {
    setLoading(true);

    try {
      // Parse course and prediction data
      const courseData = JSON.parse(params.courseData as string);
      const prediction = JSON.parse(params.prediction as string);

      // Simulate AI strategy generation
      // In reality, this calls raceStrategyEngine
      await new Promise(resolve => setTimeout(resolve, 2000));

      const generatedStrategy = {
        overallApproach: 'Conservative start, aggressive upwind positioning, protect right side.',
        startStrategy: [
          'Aim for middle-third of the line for clean air',
          'Watch for port-end bias if wind shifts right',
          'Plan for 2-minute acceleration to full speed',
        ],
        upwindTactics: [
          'Favor right side for expected wind shift',
          'Tack on headers, extend on lifts',
          'Avoid left-side traffic congestion',
        ],
        downwindTactics: [
          'Set early for preferred gybe on right',
          'Look for pressure lanes on approach',
          'Consider inside overlap at bottom mark',
        ],
        keyRisks: [
          'Heavy right-side traffic',
          'Potential wind shadow from committee boat',
        ],
      };

      // Monte Carlo simulation results
      const simulation = {
        expectedFinish: 8,
        winProbability: 12,
        podiumProbability: 45,
        averageFinish: 8.3,
        bestCase: 2,
        worstCase: 18,
      };

      setStrategy(generatedStrategy);
      setMonteCarlo(simulation);

      // Create expandable sections
      setSections([
        {
          title: 'Start Strategy',
          icon: Target,
          color: 'text-purple-700',
          bgColor: 'bg-purple-50',
          points: generatedStrategy.startStrategy,
          expanded: true,
        },
        {
          title: 'Upwind Tactics',
          icon: TrendingUp,
          color: 'text-blue-700',
          bgColor: 'bg-blue-50',
          points: generatedStrategy.upwindTactics,
          expanded: true,
        },
        {
          title: 'Downwind Tactics',
          icon: Wind,
          color: 'text-green-700',
          bgColor: 'bg-green-50',
          points: generatedStrategy.downwindTactics,
          expanded: true,
        },
      ]);

      setLoading(false);
    } catch (error) {
      console.error('Error generating strategy:', error);
      setLoading(false);
    }
  };

  const toggleSection = (index: number) => {
    setSections(prev => prev.map((section, i) =>
      i === index ? { ...section, expanded: !section.expanded } : section
    ));
  };

  const handleSave = async () => {
    // Save strategy to database
    console.log('Saving strategy...');

    // Navigate back to courses list
    router.push('/courses');
  };

  const handleShare = async () => {
    try {
      await Share.share({
        message: `Race Strategy:\n\n${strategy.overallApproach}\n\nGenerated by RegattaFlow AI`,
      });
    } catch (error) {
      console.error('Error sharing:', error);
    }
  };

  if (loading) {
    return (
      <View className="flex-1 bg-gray-50 items-center justify-center">
        <View className="items-center">
          <Sparkles size={48} color="#7C3AED" className="mb-4" />
          <Text className="text-lg font-bold text-gray-900 mb-2">
            Generating AI Strategy
          </Text>
          <Text className="text-gray-600">
            Running Monte Carlo simulations...
          </Text>
        </View>
      </View>
    );
  }

  return (
    <View className="flex-1 bg-gray-50">
      <ScrollView className="flex-1 px-4 py-4">
        {/* Overall Approach */}
        <View className="bg-gradient-to-br from-purple-50 to-blue-50 rounded-2xl p-5 mb-4 border-2 border-purple-200">
          <View className="flex-row items-center mb-3">
            <Sparkles size={24} color="#7C3AED" />
            <Text className="text-lg font-bold text-purple-900 ml-2">
              AI-Generated Strategy
            </Text>
          </View>

          <View className="bg-white rounded-xl p-4">
            <Text className="text-sm text-gray-600 mb-1">Overall Approach</Text>
            <Text className="text-base text-gray-900 leading-relaxed">
              {strategy.overallApproach}
            </Text>
          </View>
        </View>

        {/* Monte Carlo Results */}
        {monteCarlo && (
          <View className="bg-white rounded-xl p-5 mb-4">
            <View className="flex-row items-center mb-4">
              <Target size={20} color="#2563EB" />
              <Text className="text-lg font-bold text-gray-900 ml-2">
                Expected Performance
              </Text>
              <Badge action="info" variant="outline" className="ml-auto">
                <BadgeText className="text-xs">Monte Carlo</BadgeText>
              </Badge>
            </View>

            <View className="grid grid-cols-2 gap-3">
              {/* Expected Finish */}
              <View className="bg-blue-50 rounded-xl p-4">
                <Text className="text-sm text-gray-600 mb-1">Expected Finish</Text>
                <Text className="text-3xl font-bold text-blue-600">
                  {monteCarlo.expectedFinish}
                </Text>
              </View>

              {/* Win Probability */}
              <View className="bg-green-50 rounded-xl p-4">
                <Text className="text-sm text-gray-600 mb-1">Win Probability</Text>
                <Text className="text-3xl font-bold text-green-600">
                  {monteCarlo.winProbability}%
                </Text>
              </View>

              {/* Podium Probability */}
              <View className="bg-purple-50 rounded-xl p-4">
                <Text className="text-sm text-gray-600 mb-1">Top 3 Chance</Text>
                <Text className="text-3xl font-bold text-purple-600">
                  {monteCarlo.podiumProbability}%
                </Text>
              </View>

              {/* Range */}
              <View className="bg-gray-50 rounded-xl p-4">
                <Text className="text-sm text-gray-600 mb-1">Finish Range</Text>
                <Text className="text-2xl font-bold text-gray-700">
                  {monteCarlo.bestCase}-{monteCarlo.worstCase}
                </Text>
              </View>
            </View>
          </View>
        )}

        {/* Strategy Sections */}
        {sections.map((section, index) => {
          const Icon = section.icon;
          return (
            <View key={index} className="bg-white rounded-xl mb-3 overflow-hidden">
              <TouchableOpacity
                onPress={() => toggleSection(index)}
                className="flex-row items-center justify-between p-4"
                accessibilityRole="button"
                accessibilityLabel={`${section.expanded ? 'Collapse' : 'Expand'} ${section.title}`}
              >
                <View className="flex-row items-center flex-1">
                  <View className={`w-10 h-10 ${section.bgColor} rounded-lg items-center justify-center mr-3`}>
                    <Icon size={20} className={section.color} />
                  </View>
                  <Text className="text-base font-bold text-gray-900">
                    {section.title}
                  </Text>
                </View>
                {section.expanded ? (
                  <ChevronUp size={20} color="#9CA3AF" />
                ) : (
                  <ChevronDown size={20} color="#9CA3AF" />
                )}
              </TouchableOpacity>

              {section.expanded && (
                <View className="px-4 pb-4">
                  {section.points.map((point, pointIndex) => (
                    <View key={pointIndex} className="flex-row items-start mb-3 last:mb-0">
                      <View className="w-1.5 h-1.5 rounded-full bg-blue-600 mt-2 mr-3" />
                      <Text className="flex-1 text-gray-700 leading-relaxed">
                        {point}
                      </Text>
                    </View>
                  ))}
                </View>
              )}
            </View>
          );
        })}

        {/* Key Risks */}
        {strategy.keyRisks && strategy.keyRisks.length > 0 && (
          <View className="bg-amber-50 border border-amber-200 rounded-xl p-4 mb-4">
            <View className="flex-row items-center mb-3">
              <Anchor size={20} color="#D97706" />
              <Text className="font-bold text-amber-900 ml-2">
                Key Risks to Watch
              </Text>
            </View>
            {strategy.keyRisks.map((risk: string, index: number) => (
              <View key={index} className="flex-row items-start mb-2 last:mb-0">
                <Text className="text-amber-600 mr-2">⚠️</Text>
                <Text className="flex-1 text-amber-800 text-sm">
                  {risk}
                </Text>
              </View>
            ))}
          </View>
        )}

        {/* AI Transparency */}
        <View className="bg-blue-50 border border-blue-200 rounded-xl p-4 mb-6">
          <Text className="font-semibold text-blue-900 mb-2">
            How was this generated?
          </Text>
          <Text className="text-sm text-blue-700 leading-relaxed">
            This strategy was created using our RaceStrategyEngine AI, which analyzed
            your course layout, mark positions, and historical race data. Monte Carlo
            simulations ran 10,000 virtual races to predict performance outcomes.
          </Text>
        </View>
      </ScrollView>

      {/* Bottom Actions */}
      <View className="bg-white border-t border-gray-200 p-4">
        <View className="flex-row gap-3 mb-3">
          <Button
            action="secondary"
            variant="outline"
            size="lg"
            className="flex-1"
            onPress={handleShare}
          >
            <ButtonIcon as={Share2} />
            <ButtonText>Share</ButtonText>
          </Button>

          <Button
            action="primary"
            variant="solid"
            size="lg"
            className="flex-1"
            onPress={handleSave}
          >
            <ButtonIcon as={BookmarkPlus} />
            <ButtonText>Save Strategy</ButtonText>
          </Button>
        </View>

        <Text className="text-center text-gray-500 text-xs">
          Strategy will be saved to your race
        </Text>
      </View>
    </View>
  );
}
