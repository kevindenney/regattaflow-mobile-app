-- ============================================================================
-- RACE TRACKING & ANALYSIS SCHEMA
-- ============================================================================
-- Race countdown timer sessions, GPS tracking, AI analysis, and course predictions
-- Powers dashboard features and RaceAnalysisAgent + CoursePredictionAgent

-- ============================================================================
-- RACE COUNTDOWN TIMER SESSIONS
-- ============================================================================
CREATE TABLE IF NOT EXISTS race_timer_sessions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  sailor_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  regatta_id UUID REFERENCES regattas(id) ON DELETE CASCADE,
  race_number INTEGER,

  -- Timer data
  start_time TIMESTAMPTZ NOT NULL,
  end_time TIMESTAMPTZ,
  duration_seconds INTEGER,

  -- GPS Track (if available)
  track_points JSONB, -- [{lat, lng, timestamp, speed, heading, altitude}, ...]

  -- Race conditions (captured at start)
  wind_direction INTEGER, -- 0-360 degrees
  wind_speed DECIMAL(5,2), -- knots
  wave_height DECIMAL(5,2), -- meters
  current_direction INTEGER, -- 0-360 degrees
  current_speed DECIMAL(5,2), -- knots

  -- Result
  position INTEGER,
  fleet_size INTEGER,

  -- Metadata
  notes TEXT,
  auto_analyzed BOOLEAN DEFAULT false, -- Flag if RaceAnalysisAgent has processed

  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_race_timer_sessions_sailor ON race_timer_sessions(sailor_id);
CREATE INDEX IF NOT EXISTS idx_race_timer_sessions_regatta ON race_timer_sessions(regatta_id);
CREATE INDEX IF NOT EXISTS idx_race_timer_sessions_start_time ON race_timer_sessions(start_time DESC);
CREATE INDEX IF NOT EXISTS idx_race_timer_sessions_auto_analyzed ON race_timer_sessions(auto_analyzed) WHERE auto_analyzed = false;

-- ============================================================================
-- AI COACH RACE ANALYSIS
-- ============================================================================
CREATE TABLE IF NOT EXISTS ai_coach_analysis (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  timer_session_id UUID REFERENCES race_timer_sessions(id) ON DELETE CASCADE,

  -- AI Analysis (generated by RaceAnalysisAgent)
  overall_summary TEXT,
  start_analysis TEXT,
  upwind_analysis TEXT,
  downwind_analysis TEXT,
  tactical_decisions TEXT,
  boat_handling TEXT,
  recommendations TEXT[],

  -- Metadata
  confidence_score DECIMAL(3,2), -- 0.00 to 1.00
  model_used TEXT, -- 'claude-sonnet-4-5-20250929'
  analysis_version TEXT, -- Track agent version for debugging

  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),

  UNIQUE(timer_session_id)
);

CREATE INDEX IF NOT EXISTS idx_ai_coach_analysis_session ON ai_coach_analysis(timer_session_id);
CREATE INDEX IF NOT EXISTS idx_ai_coach_analysis_confidence ON ai_coach_analysis(confidence_score DESC);

-- ============================================================================
-- REAL COACH RACE ANALYSIS
-- ============================================================================
CREATE TABLE IF NOT EXISTS coach_race_analysis (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  timer_session_id UUID REFERENCES race_timer_sessions(id) ON DELETE CASCADE,
  coach_id UUID REFERENCES auth.users(id) ON DELETE SET NULL,

  -- Coach Analysis
  overall_performance TEXT,
  start_analysis TEXT,
  upwind_analysis TEXT,
  downwind_analysis TEXT,
  tactical_decisions TEXT,
  boat_handling TEXT,
  recommendations TEXT,

  -- Rating
  rating INTEGER CHECK (rating >= 1 AND rating <= 5),

  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW(),

  UNIQUE(timer_session_id)
);

CREATE INDEX IF NOT EXISTS idx_coach_race_analysis_session ON coach_race_analysis(timer_session_id);
CREATE INDEX IF NOT EXISTS idx_coach_race_analysis_coach ON coach_race_analysis(coach_id);
CREATE INDEX IF NOT EXISTS idx_coach_race_analysis_rating ON coach_race_analysis(rating DESC);

-- ============================================================================
-- RACE COURSE PREDICTIONS
-- ============================================================================
CREATE TABLE IF NOT EXISTS race_predictions (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  regatta_id UUID REFERENCES regattas(id) ON DELETE CASCADE,
  predicted_course_id UUID REFERENCES race_courses(id) ON DELETE SET NULL,

  -- Forecast data used for prediction
  forecast_wind_direction INTEGER, -- 0-360 degrees
  forecast_wind_speed DECIMAL(5,2), -- knots
  forecast_confidence INTEGER, -- 0-100

  -- AI prediction (generated by CoursePredictionAgent)
  prediction_confidence INTEGER, -- 0-100
  prediction_reasoning TEXT,
  alternative_courses JSONB, -- [{course_id, course_name, probability}]

  predicted_at TIMESTAMPTZ DEFAULT NOW(),
  predicted_for_date TIMESTAMPTZ NOT NULL,

  -- Verification (after race)
  actual_course_id UUID REFERENCES race_courses(id) ON DELETE SET NULL,
  prediction_correct BOOLEAN,

  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

CREATE INDEX IF NOT EXISTS idx_race_predictions_regatta ON race_predictions(regatta_id);
CREATE INDEX IF NOT EXISTS idx_race_predictions_predicted_course ON race_predictions(predicted_course_id);
CREATE INDEX IF NOT EXISTS idx_race_predictions_predicted_for_date ON race_predictions(predicted_for_date DESC);
CREATE INDEX IF NOT EXISTS idx_race_predictions_confidence ON race_predictions(prediction_confidence DESC);

-- ============================================================================
-- ENHANCED REGATTA FIELDS FOR DASHBOARD
-- ============================================================================

ALTER TABLE regattas
  ADD COLUMN IF NOT EXISTS vhf_channel TEXT,
  ADD COLUMN IF NOT EXISTS number_of_races INTEGER,
  ADD COLUMN IF NOT EXISTS starting_sequence TEXT, -- "5-4-1-0" or "10-5-4-1-0"
  ADD COLUMN IF NOT EXISTS predicted_course_id UUID REFERENCES race_courses(id),
  ADD COLUMN IF NOT EXISTS upwind_strategy_summary TEXT,
  ADD COLUMN IF NOT EXISTS downwind_strategy_summary TEXT,
  ADD COLUMN IF NOT EXISTS weather_confidence INTEGER; -- 0-100

-- ============================================================================
-- ROW LEVEL SECURITY POLICIES
-- ============================================================================

-- Race Timer Sessions
ALTER TABLE race_timer_sessions ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can manage their own timer sessions" ON race_timer_sessions;
CREATE POLICY "Users can manage their own timer sessions"
  ON race_timer_sessions FOR ALL
  USING (auth.uid() = sailor_id);

DROP POLICY IF EXISTS "Coaches can view client timer sessions" ON race_timer_sessions;
CREATE POLICY "Coaches can view client timer sessions"
  ON race_timer_sessions FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM coaching_sessions
      WHERE coaching_sessions.sailor_id = race_timer_sessions.sailor_id
      AND coaching_sessions.coach_id = auth.uid()
    )
  );

-- AI Coach Analysis
ALTER TABLE ai_coach_analysis ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view their own AI analysis" ON ai_coach_analysis;
CREATE POLICY "Users can view their own AI analysis"
  ON ai_coach_analysis FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM race_timer_sessions
      WHERE race_timer_sessions.id = ai_coach_analysis.timer_session_id
      AND race_timer_sessions.sailor_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "System can create AI analysis" ON ai_coach_analysis;
CREATE POLICY "System can create AI analysis"
  ON ai_coach_analysis FOR INSERT
  WITH CHECK (true); -- Allow service role to create analysis

-- Real Coach Analysis
ALTER TABLE coach_race_analysis ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Users can view their own coach analysis" ON coach_race_analysis;
CREATE POLICY "Users can view their own coach analysis"
  ON coach_race_analysis FOR SELECT
  USING (
    EXISTS (
      SELECT 1 FROM race_timer_sessions
      WHERE race_timer_sessions.id = coach_race_analysis.timer_session_id
      AND race_timer_sessions.sailor_id = auth.uid()
    )
  );

DROP POLICY IF EXISTS "Coaches can create analysis for their clients" ON coach_race_analysis;
CREATE POLICY "Coaches can create analysis for their clients"
  ON coach_race_analysis FOR ALL
  USING (
    EXISTS (
      SELECT 1 FROM race_timer_sessions rts
      JOIN coaching_sessions cs ON cs.sailor_id = rts.sailor_id
      WHERE rts.id = coach_race_analysis.timer_session_id
      AND cs.coach_id = auth.uid()
    )
  );

-- Race Predictions
ALTER TABLE race_predictions ENABLE ROW LEVEL SECURITY;

DROP POLICY IF EXISTS "Anyone can view race predictions" ON race_predictions;
CREATE POLICY "Anyone can view race predictions"
  ON race_predictions FOR SELECT
  USING (true);

DROP POLICY IF EXISTS "System can create race predictions" ON race_predictions;
CREATE POLICY "System can create race predictions"
  ON race_predictions FOR INSERT
  WITH CHECK (true); -- Allow service role to create predictions

DROP POLICY IF EXISTS "Race committees can update predictions" ON race_predictions;
CREATE POLICY "Race committees can update predictions"
  ON race_predictions FOR UPDATE
  USING (
    EXISTS (
      SELECT 1 FROM users
      WHERE users.id = auth.uid()
      AND users.user_type = 'club'
    )
  );

-- ============================================================================
-- FUNCTIONS & TRIGGERS
-- ============================================================================

-- Update updated_at timestamp
DROP TRIGGER IF EXISTS update_race_timer_sessions_updated_at ON race_timer_sessions;
CREATE TRIGGER update_race_timer_sessions_updated_at
  BEFORE UPDATE ON race_timer_sessions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_ai_coach_analysis_updated_at ON ai_coach_analysis;
CREATE TRIGGER update_ai_coach_analysis_updated_at
  BEFORE UPDATE ON ai_coach_analysis
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_coach_race_analysis_updated_at ON coach_race_analysis;
CREATE TRIGGER update_coach_race_analysis_updated_at
  BEFORE UPDATE ON coach_race_analysis
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

DROP TRIGGER IF EXISTS update_race_predictions_updated_at ON race_predictions;
CREATE TRIGGER update_race_predictions_updated_at
  BEFORE UPDATE ON race_predictions
  FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Calculate duration when timer stops
CREATE OR REPLACE FUNCTION calculate_timer_duration()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.end_time IS NOT NULL AND OLD.end_time IS NULL THEN
    NEW.duration_seconds = EXTRACT(EPOCH FROM (NEW.end_time - NEW.start_time))::INTEGER;
  END IF;
  RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS calculate_timer_duration_trigger ON race_timer_sessions;
CREATE TRIGGER calculate_timer_duration_trigger
  BEFORE UPDATE ON race_timer_sessions
  FOR EACH ROW
  WHEN (NEW.end_time IS NOT NULL AND OLD.end_time IS NULL)
  EXECUTE FUNCTION calculate_timer_duration();

-- Verify prediction accuracy after race
CREATE OR REPLACE FUNCTION verify_course_prediction()
RETURNS TRIGGER AS $$
BEGIN
  IF NEW.actual_course_id IS NOT NULL AND OLD.actual_course_id IS NULL THEN
    NEW.prediction_correct = (NEW.predicted_course_id = NEW.actual_course_id);
  END IF;
  RETURN NEW;
END;
$$ language 'plpgsql';

DROP TRIGGER IF EXISTS verify_course_prediction_trigger ON race_predictions;
CREATE TRIGGER verify_course_prediction_trigger
  BEFORE UPDATE ON race_predictions
  FOR EACH ROW
  WHEN (NEW.actual_course_id IS NOT NULL AND OLD.actual_course_id IS NULL)
  EXECUTE FUNCTION verify_course_prediction();

-- Grant permissions
GRANT ALL ON race_timer_sessions TO authenticated;
GRANT ALL ON ai_coach_analysis TO authenticated;
GRANT ALL ON coach_race_analysis TO authenticated;
GRANT ALL ON race_predictions TO authenticated;

-- Comments
COMMENT ON TABLE race_timer_sessions IS 'GPS-tracked race countdown timer sessions for performance tracking';
COMMENT ON TABLE ai_coach_analysis IS 'AI-generated race analysis by RaceAnalysisAgent using GPS tracks';
COMMENT ON TABLE coach_race_analysis IS 'Real coach feedback and analysis on race performance';
COMMENT ON TABLE race_predictions IS 'AI course predictions by CoursePredictionAgent based on weather forecasts';
